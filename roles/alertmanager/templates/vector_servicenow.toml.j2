## Vector configuration for direct ServiceNow forwarding

[sources.am_http]
type = "http_server"
address = "0.0.0.0:{{ alertmanager_forwarder_port | default(9097) }}"
path = "/"
encoding = "json"
# For newer Vector:
# [sources.am_http.decoding]
# codec = "json"

[transforms.to_servicenow]
type = "remap"
inputs = ["am_http"]
source = '''
  # Summary (supports both root-level Alertmanager payload and nested .body variant)
  summary = "Alert from Alertmanager"
  if exists(.commonAnnotations.summary) {
    tmp = to_string(.commonAnnotations.summary) ?? null
    if tmp != null { summary = tmp }
  } else if exists(.alerts[0].annotations.summary) {
    tmp = to_string(.alerts[0].annotations.summary) ?? null
    if tmp != null { summary = tmp }
  } else if exists(.body.commonAnnotations.summary) {
    tmp = to_string(.body.commonAnnotations.summary) ?? null
    if tmp != null { summary = tmp }
  } else if exists(.body.alerts[0].annotations.summary) {
    tmp = to_string(.body.alerts[0].annotations.summary) ?? null
    if tmp != null { summary = tmp }
  }

  # Description (handles root-level and nested .body)
  description = null
  if exists(.commonAnnotations.description) {
    description = to_string(.commonAnnotations.description) ?? null
  } else if exists(.alerts[0].annotations.description) {
    description = to_string(.alerts[0].annotations.description) ?? null
  } else if exists(.body.commonAnnotations.description) {
    description = to_string(.body.commonAnnotations.description) ?? null
  } else if exists(.body.alerts[0].annotations.description) {
    description = to_string(.body.alerts[0].annotations.description) ?? null
  }

  # Severity for urgency mapping (supports both payload shapes)
  severity_label = if exists(.commonLabels.severity) { to_string(.commonLabels.severity) ?? null } else { to_string(.body.commonLabels.severity) ?? null }
  if severity_label == null { severity_label = "warning" }

  # Map severity -> urgency (single expression)
  urgency = if severity_label == "critical" { 1 } else if severity_label == "high" { 2 } else if severity_label == "warning" { 3 } else if severity_label == "info" { 4 } else { 3 }

  # Fixed demo impact
  impact = 3

  # Candidate CI name from payload (supports root-level and nested .body)
  ci_name = null
  if exists(.commonLabels.instance) {
    ci_name = to_string(.commonLabels.instance) ?? null
  } else if exists(.alerts[0].labels.instance) {
    ci_name = to_string(.alerts[0].labels.instance) ?? null
  } else if exists(.body.commonLabels.instance) {
    ci_name = to_string(.body.commonLabels.instance) ?? null
  } else if exists(.body.alerts[0].labels.instance) {
    ci_name = to_string(.body.alerts[0].labels.instance) ?? null
  }

  # Alertmanager fingerprint (for correlation)
  fingerprint = null
  if exists(.alerts[0].fingerprint) {
    fingerprint = to_string(.alerts[0].fingerprint) ?? null
  } else if exists(.body.alerts[0].fingerprint) {
    fingerprint = to_string(.body.alerts[0].fingerprint) ?? null
  }

  # Fallback description
  description_out = if description != null && description != "" { description } else { summary }

  # Minimal incident payload for demo
  out = {
    "short_description": summary,
    "description": description_out,
    "impact": to_string(impact),
    "urgency": to_string(urgency),
    "assignment_group": "Event Driven Ansible",
    "caller_id": "System Administrator"
  }

  if fingerprint != null {
    out = merge(out, { "correlation_id": fingerprint })
  }

  if ci_name != null {
    # With sysparm_input_display_value=true we can send the display value (hostname) directly
    out = merge(out, { "cmdb_ci": ci_name })
  }

  . = out
'''

[sinks.servicenow]
type = "http"
inputs = ["to_servicenow"]
uri = "{{ servicenow_instance_url | regex_replace('/+$','') }}/api/now/table/incident?sysparm_input_display_value=true"
method = "post"

[sinks.servicenow.batch]
max_events = 1

[sinks.servicenow.encoding]
codec = "json"

[sinks.servicenow.request.headers]
Authorization = "Basic {{ (servicenow_username ~ ':' ~ servicenow_password) | b64encode }}"
"Content-Type" = "application/json"
Accept = "application/json"

[sinks.servicenow.request]
sensitive_header_names = ["Authorization"]
